---
apiVersion: v1
kind: ConfigMap
metadata:
  name: debugger-scripts
data:
  command-validator.sh: |
    #!/bin/bash
    
    # Command validation script
    # Only allows tcpdump and ncat commands with specific parameters
    
    ALLOWED_COMMANDS=("tcpdump" "ncat" "ipconfig" "ip")
    COMMAND="$1"
    shift
    ARGS="$@"
    
    # Function to log audit events
    audit_log() {
        local action="$1"
        local command="$2"
        local user="${AUDIT_USER:-system}"
        local node="${NODE_NAME:-unknown}"
        local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        echo "{\"timestamp\":\"$timestamp\",\"user\":\"$user\",\"node\":\"$node\",\"action\":\"$action\",\"command\":\"$command\"}" >> /var/log/debugger-audit.log
        
        # Also send to stdout for container logging
        echo "AUDIT: $timestamp - User: $user, Node: $node, Action: $action, Command: $command"
    }
    
    # Check if command is allowed
    if [[ ! " ${ALLOWED_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
        audit_log "VIOLATION" "$COMMAND $ARGS"
        echo "ERROR: Command '$COMMAND' is not allowed. Only tcpdump, ncat, and read-only ip commands are permitted."
        exit 1
    fi

    # Validate tcpdump arguments
    if [[ "$COMMAND" == "tcpdump" ]]; then
        # Basic validation - prevent dangerous options
        if echo "$ARGS" | grep -E "(-w|--write|>|>>|\||exec|system)" > /dev/null; then
            audit_log "VIOLATION" "$COMMAND $ARGS"
            echo "ERROR: Dangerous tcpdump options detected"
            exit 1
        fi
        
        # Ensure basic safety parameters
        if ! echo "$ARGS" | grep -E "(-c [0-9]+|-G [0-9]+)" > /dev/null; then
            # Add default packet count limit if not specified
            ARGS="-c 1000 $ARGS"
        fi
    fi

    # Validate ncat arguments  
    if [[ "$COMMAND" == "ncat" ]]; then
        # Basic validation for ncat
        if echo "$ARGS" | grep -E "(--exec|--sh-exec|-e|>|>>|\|)" > /dev/null; then
            audit_log "VIOLATION" "$COMMAND $ARGS"
            echo "ERROR: Dangerous ncat options detected"
            exit 1
        fi
    fi

    # Validate ip command arguments (allow only read-only)
    if [[ "$COMMAND" == "ip" ]]; then
        # Only allow read-only subcommands: 'a', 'addr', 'link', 'route', 'r', 'neigh', 'n', 'rule', 'show', 'list', 'l', 'help', 'monitor'
        readonly_ip_regex='^(a|addr|link|route|r|neigh|n|rule|show|list|l|help|monitor)( |$)'
        if ! [[ "$ARGS" =~ $readonly_ip_regex ]]; then
            audit_log "VIOLATION" "$COMMAND $ARGS"
            echo "ERROR: Only read-only ip commands are allowed (e.g., ip a, ip route, ip link, ip neigh, ip rule, ip show, ip list, ip help, ip monitor)"
            exit 1
        fi
        # Disallow any potentially dangerous options
        if echo "$ARGS" | grep -E '(add|del|delete|flush|change|replace|append|prepend|dev|set|up|down|exec|>|>>|\|)' > /dev/null; then
            audit_log "VIOLATION" "$COMMAND $ARGS"
            echo "ERROR: Only read-only ip commands are allowed. Modification commands are not permitted."
            exit 1
        fi
    fi

    # Log successful command execution
    audit_log "EXECUTE" "$COMMAND $ARGS"
    
    # Execute the validated command
    exec "$COMMAND" $ARGS
  
  entrypoint.sh: |
    #!/bin/bash
    
    # Container entrypoint script
    set -e
    
    # Create audit log file
    mkdir -p /var/log
    touch /var/log/debugger-audit.log
    
    # Set up environment
    export NODE_NAME="${NODE_NAME:-$(hostname)}"
    export AUDIT_USER="${REMOTE_USER:-system}"
    
    # Check if we're running a command or just sleeping (for DaemonSet)
    if [[ "$1" == "daemon" ]]; then
        # DaemonSet mode - just sleep and maintain the pod
        echo "Starting debugger daemon on node: $NODE_NAME"
        while true; do
            sleep 3600
        done
    else
        # Job mode - execute the command
        /opt/scripts/command-validator.sh "$@"
    fi